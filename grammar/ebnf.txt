# #  comment
# () grouping
# [] optional
# *  zero or more
# +  one or more
# |  alternative



program    ::= (import)* (fundef)* EOF

import    ::= "import" importable;

importable ::= "lift.opencl"                                        # this way we allow for extensibility
                                                                    # new "packages" can be added here


fundef    ::= "def" IDENTIFIER "(" params ") =" block               # function declaration

params     ::= [ IDENTIFIER ":" type ("," IDENTIFIER ":" type)* ]

block      ::= "{" (stmt)* "}"

stmt       ::= exp ";"                                              # expression statement, e.g. a function call
             | exp "=" exp ";"                                      # assignment - should be applicable via lambdas

type       ::= "Int" | "Float" | "Double" | "Long" | "Array(" type "," exp ")"
             # syntactic sugar for Arrays:
             |  "[" (IDENTIFIER | INT_LITERAL) "]" ("[" (IDENTIFIER | INT_LITERAL) "]")* type

exp        ::= "(" exp ")"
             | IDENTIFIER
             | INT_LITERAL
             | funcall

funcall      ::= IDENTIFIER "(" [ exp ("," exp)* ] ")"

IDENTIFIER   ::= "a-z|A-Z"

INT_LITERAL  ::=

