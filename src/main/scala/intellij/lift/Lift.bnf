{
  parserClass="intellij.lift.parser.LiftParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Lift"
  psiImplClassSuffix="Impl"
  psiPackage="intellij.lift.psi"
  psiImplPackage="intellij.lift.psi.impl"

  elementTypeHolderClass="intellij.lift.psi.LiftTypes"
  elementTypeClass="intellij.lift.psi.LiftElementType"
  tokenTypeClass="intellij.lift.psi.LiftTokenType"
}

program             ::= (import)* (fundef)*

import              ::= IMPORT_KEYWORD IMPORTABLE GAP

ident               ::= IDENTIFIER

value               ::= NUMERIC_VALUE | BOOLEAN

array_type          ::= ARRAY LEFT_PAREN typ COMMA (ident | NUMERIC_VALUE) RIGHT_PAREN
                      | (LEFT_BRACKET (IDENTIFIER | NUMERIC_VALUE)? RIGHT_BRACKET)+ TYPE

tuple_type          ::= TUPLE LEFT_PAREN exp COMMA exp+ RIGHT_PAREN
//                      | LEFT_PAREN exp COMMA exp+ RIGHT_PAREN  ==> DELAY UNTIL VARIABLE ASSIGNMENT SUPPORTED?

typ                 ::= TYPE | array_type | tuple_type

fundef              ::= FUNDEFINITION ident LEFT_PAREN params RIGHT_PAREN (COLON typ)? EQUAL block (GAP)?

params              ::= [ param (COMMA param)* ]

param               ::= ident COLON typ

block               ::= LEFT_BRACE GAP* (stmt)* (APPLICATOR arguments)? GAP* RIGHT_BRACE

stmt                ::= exp SEMI_COLON? GAP*

exp                 ::= LEFT_PAREN exp RIGHT_PAREN
                      | composed_funcall
                      | funcall
                      | value
                      | symbol
                      | vardef
                      | IDENTIFIER

symbol              ::= OPERATION

funcall             ::= IDENTIFIER LEFT_PAREN (GAP)? [ exp (COMMA exp)* ] (GAP)? RIGHT_PAREN

vardef              ::= VARDEFINITION ident EQUAL arguments

arguments           ::= funcall
                      | IDENTIFIER
                      | value

composed_funcall    ::= funcall COMPOSER funcall (COMPOSER funcall)*

comment             ::= LINE_COMMENT | BLOCK_COMMENT | NOT_TERMINATED_COMMENT